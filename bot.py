import asyncio
import logging
import os
import re
from pathlib import Path

from dotenv import load_dotenv

from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update)
from telegram.ext import (Application, CallbackQueryHandler, CommandHandler,
                          ContextTypes, MessageHandler, filters)

# =================================================================================
# 1. CONFIGURATION
# =================================================================================
load_dotenv()

# These values are read from environment variables on PythonAnywhere
TOKEN = 'TOKEN'
MANAGER_CHAT_ID = 'ID'

# --- IMPORTANT ---
WEBHOOK_SECRET = "SECRET"
WEBAPP_URL = "https://Nickname.pythonanywhere.com"

# Create a folder for logs if it doesn't exist
Path("logs").mkdir(exist_ok=True)

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("logs/bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# =================================================================================
# 2. HELPER & HANDLER FUNCTIONS
# =================================================================================

def escape_markdown_v2(text: str) -> str:
    """Escapes special characters for Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)


async def send_to_manager(user_info: dict, app: Application):
    """Sends user application to the manager with proper formatting."""
    try:
        # Escape all user-provided data for MarkdownV2
        user_first_name = escape_markdown_v2(user_info.get('first_name', ''))
        username = escape_markdown_v2(user_info.get('username', '–Ω–µ—Ç'))
        direction = escape_markdown_v2(user_info.get('direction', ''))
        dates = escape_markdown_v2(user_info.get('dates', ''))
        budget = escape_markdown_v2(user_info.get('budget', ''))

        # CORRECTED: Changed \! to \\! to be valid Python syntax.
        # Python will process \\! into the string \! which is what Telegram needs.
        message = f"""üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä\\!*

üë§ *–ö–ª–∏–µ–Ω—Ç:* [{user_first_name}](tg://user?id={user_info['id']})
üì± @{username}

üìç *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction}
üìÖ *–î–∞—Ç—ã:* {dates}
üí∞ *–ë—é–¥–∂–µ—Ç:* {budget}"""

        await app.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=message,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                    url=f"tg://user?id={user_info['id']}"
                )
            ]])
        )
        logger.info(f"Successfully sent application for user {user_info['id']} to manager.")
    except Exception as e:
        logger.error(f"Failed to send application for user {user_info['id']} to manager. Error: {e}")
        logger.error(f"User data that caused the error: {user_info}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Welcomes the user."""
    await update.message.reply_text(
        "‚úàÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç—É—Ä–æ–≤!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tour –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–ª–∏ /faq –¥–ª—è –ø–æ–º–æ—â–∏"
    )


async def tour(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Starts the tour application process."""
    user = update.message.from_user
    context.user_data['tour'] = {
        'step': 1,
        'id': user.id,
        'first_name': user.first_name,
        'username': user.username or '–Ω–µ—Ç'
    }
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º —Ç—É—Ä! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        "1. –ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—É—Ä—Ü–∏—è, –ë–∞–ª–∏)"
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles user answers for the tour application."""
    tour_data = context.user_data.get('tour')
    if not tour_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /tour, —á—Ç–æ–±—ã —è –º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å.")
        return

    text = update.message.text
    step = tour_data.get('step')

    if step == 1:
        tour_data['direction'] = text
        tour_data['step'] = 2
        await update.message.reply_text("2. –ù–∞ –∫–∞–∫–∏–µ –¥–∞—Ç—ã? (–ù–∞–ø—Ä–∏–º–µ—Ä: 01-15 –∞–≤–≥—É—Å—Ç–∞)")
    elif step == 2:
        tour_data['dates'] = text
        tour_data['step'] = 3
        await update.message.reply_text("3. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: 100 000 —Ä—É–±–ª–µ–π)")
    elif step == 3:
        tour_data['budget'] = text
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞."
        )
        # Pass the application instance from the context
        await send_to_manager(tour_data, context.application)
        context.user_data.pop('tour', None)


async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Shows FAQ options."""
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="faq_pay")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —Ç—É—Ä–∞", callback_data="faq_cancel")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="faq_contacts")]
    ]
    await update.message.reply_text(
        "‚Ñπ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles FAQ button presses."""
    query = update.callback_query
    await query.answer()

    faq_messages = {
        "faq_pay": "üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n\\- –ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω\n\\- –ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –æ—Ñ–∏—Å–µ\n\\- –ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º —á–µ—Ä–µ–∑ –±–∞–Ω–∫",
        "faq_cancel": "‚ùå *–£—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã:*\n\\- –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞ 14 –¥–Ω–µ–π\n\\- 50% –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞ 7 –¥–Ω–µ–π\n\\- –ú–µ–Ω–µ–µ 7 –¥–Ω–µ–π –¥–æ –ø–æ–µ–∑–¥–∫–∏ \\- —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è",
        "faq_contacts": "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n\\- –ú–µ–Ω–µ–¥–∂–µ—Ä: @your\\_manager\\_username\n\\- –¢–µ–ª–µ—Ñ–æ–Ω: `+7 (XXX) XXX-XX-XX`\n\\- Email: support@yourcompany\\.com"
    }
    
    if query.data in faq_messages:
        await query.edit_message_text(text=faq_messages[query.data], parse_mode="MarkdownV2")


# =================================================================================
# 3. APPLICATION SETUP
# =================================================================================
# The WSGI server on PythonAnywhere will import this 'application' object.
# We don't need a main() function or a polling loop.

if not TOKEN:
    logger.critical("FATAL: TELEGRAM_TOKEN environment variable not set!")
else:
    # Create the Application instance
    application = Application.builder().token(TOKEN).build()

    # Register all the handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tour", tour))
    application.add_handler(CommandHandler("faq", faq))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))


    # =================================================================================
# 4. LOCAL POLLING STARTUP (NEWLY ADDED)
# =================================================================================
if __name__ == "__main__":
    if application:
        logger.info("Starting bot in polling mode...")
        application.run_polling()
